/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { OpenAiApi } from "@fern-api/open-ai";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace FineTunes {
    interface Options {
        environment?: environments.OpenAiApiEnvironment | string;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}

export class FineTunes {
    constructor(private readonly options: FineTunes.Options) {}

    /**
     * List your organization's fine-tuning jobs
     */
    public async list(): Promise<OpenAiApi.ListFineTunesResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.OpenAiApiEnvironment.Production, "/fine-tunes"),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.ListFineTunesResponse.parseOrThrow(
                _response.body as serializers.ListFineTunesResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpenAiApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenAiApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpenAiApiTimeoutError();
            case "unknown":
                throw new errors.OpenAiApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Creates a job that fine-tunes a specified model from a given dataset. Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete. [Learn more about Fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)
     *
     */
    public async create(request: OpenAiApi.CreateFineTuneRequest): Promise<OpenAiApi.FineTune> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.OpenAiApiEnvironment.Production, "/fine-tunes"),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.CreateFineTuneRequest.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.FineTune.parseOrThrow(_response.body as serializers.FineTune.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpenAiApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenAiApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpenAiApiTimeoutError();
            case "unknown":
                throw new errors.OpenAiApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Gets info about the fine-tune job.
     * [Learn more about Fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)
     *
     */
    public async retrieve(fineTuneId: OpenAiApi.FineTuneId): Promise<OpenAiApi.FineTune> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.OpenAiApiEnvironment.Production,
                `/fine-tunes/${await serializers.FineTuneId.jsonOrThrow(fineTuneId)}`
            ),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.FineTune.parseOrThrow(_response.body as serializers.FineTune.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpenAiApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenAiApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpenAiApiTimeoutError();
            case "unknown":
                throw new errors.OpenAiApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Immediately cancel a fine-tune job.
     */
    public async cancel(fineTuneId: OpenAiApi.FineTuneId): Promise<OpenAiApi.FineTune> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.OpenAiApiEnvironment.Production,
                `/fine-tunes/${await serializers.FineTuneId.jsonOrThrow(fineTuneId)}/cancel`
            ),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.FineTune.parseOrThrow(_response.body as serializers.FineTune.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpenAiApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenAiApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpenAiApiTimeoutError();
            case "unknown":
                throw new errors.OpenAiApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get fine-grained status updates for a fine-tune job.
     *
     */
    public async listEvents(
        fineTuneId: OpenAiApi.FineTuneId,
        request: OpenAiApi.ListFineTuneEventsRequest = {}
    ): Promise<OpenAiApi.ListFineTuneEventsResponse> {
        const { stream } = request;
        const _queryParams = new URLSearchParams();
        if (stream != null) {
            _queryParams.append("stream", stream.toString());
        }

        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.OpenAiApiEnvironment.Production,
                `/fine-tunes/${await serializers.FineTuneId.jsonOrThrow(fineTuneId)}/events`
            ),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.ListFineTuneEventsResponse.parseOrThrow(
                _response.body as serializers.ListFineTuneEventsResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpenAiApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenAiApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpenAiApiTimeoutError();
            case "unknown":
                throw new errors.OpenAiApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
