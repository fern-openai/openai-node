/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { OpenAiApi } from "@fern-api/open-ai";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Embeddings {
    interface Options {
        environment?: environments.OpenAiApiEnvironment | string;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}

export class Embeddings {
    constructor(private readonly options: Embeddings.Options) {}

    public async create(request: OpenAiApi.CreateEmbeddingRequest): Promise<OpenAiApi.CreateEmbeddingResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.OpenAiApiEnvironment.Production, "/embeddings"),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            body: await serializers.CreateEmbeddingRequest.jsonOrThrow(request),
        });
        if (_response.ok) {
            return await serializers.CreateEmbeddingResponse.parseOrThrow(
                _response.body as serializers.CreateEmbeddingResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpenAiApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenAiApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpenAiApiTimeoutError();
            case "unknown":
                throw new errors.OpenAiApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
