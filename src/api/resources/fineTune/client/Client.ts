/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../../../core";
import { OpenAI } from "@fern-api/openai";
import * as environments from "../../../../environments";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace FineTune {
    interface Options {
        token: core.Supplier<core.BearerToken>;
        organization?: core.Supplier<string | undefined>;
    }
}

export class FineTune {
    constructor(private readonly options: FineTune.Options) {}

    /**
     * List your organization's fine-tuning jobs
     * @throws {OpenAI.UnauthorizedError}
     * @throws {OpenAI.RateLimitError}
     * @throws {OpenAI.InternalServerError}
     */
    public async list(): Promise<OpenAI.ListFineTunesResponse> {
        const _response = await core.fetcher({
            url: urlJoin(environments.OpenAIEnvironment.Production, "/fine-tunes"),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "OpenAI-Organization": await core.Supplier.get(this.options.organization),
            },
            contentType: "application/json",
        });
        if (_response.ok) {
            return await serializers.ListFineTunesResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new OpenAI.UnauthorizedError();
                case 429:
                    throw new OpenAI.RateLimitError();
                case 500:
                    throw new OpenAI.InternalServerError();
                default:
                    throw new errors.OpenAIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenAIError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpenAITimeoutError();
            case "unknown":
                throw new errors.OpenAIError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Creates a job that fine-tunes a specified model from a given dataset. Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete. [Learn more about Fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)
     *
     * @throws {OpenAI.UnauthorizedError}
     * @throws {OpenAI.RateLimitError}
     * @throws {OpenAI.InternalServerError}
     */
    public async create(request: OpenAI.CreateFineTuneRequest): Promise<OpenAI.FineTune> {
        const _response = await core.fetcher({
            url: urlJoin(environments.OpenAIEnvironment.Production, "/fine-tunes"),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "OpenAI-Organization": await core.Supplier.get(this.options.organization),
            },
            contentType: "application/json",
            body: await serializers.CreateFineTuneRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
        });
        if (_response.ok) {
            return await serializers.FineTune.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new OpenAI.UnauthorizedError();
                case 429:
                    throw new OpenAI.RateLimitError();
                case 500:
                    throw new OpenAI.InternalServerError();
                default:
                    throw new errors.OpenAIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenAIError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpenAITimeoutError();
            case "unknown":
                throw new errors.OpenAIError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Gets info about the fine-tune job.
     * [Learn more about Fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)
     *
     * @throws {OpenAI.UnauthorizedError}
     * @throws {OpenAI.RateLimitError}
     * @throws {OpenAI.InternalServerError}
     */
    public async retrieve(fineTuneId: OpenAI.FineTuneId): Promise<OpenAI.FineTune> {
        const _response = await core.fetcher({
            url: urlJoin(
                environments.OpenAIEnvironment.Production,
                `/fine-tunes/${await serializers.FineTuneId.jsonOrThrow(fineTuneId)}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "OpenAI-Organization": await core.Supplier.get(this.options.organization),
            },
            contentType: "application/json",
        });
        if (_response.ok) {
            return await serializers.FineTune.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new OpenAI.UnauthorizedError();
                case 429:
                    throw new OpenAI.RateLimitError();
                case 500:
                    throw new OpenAI.InternalServerError();
                default:
                    throw new errors.OpenAIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenAIError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpenAITimeoutError();
            case "unknown":
                throw new errors.OpenAIError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Immediately cancel a fine-tune job.
     * @throws {OpenAI.UnauthorizedError}
     * @throws {OpenAI.RateLimitError}
     * @throws {OpenAI.InternalServerError}
     */
    public async cancel(fineTuneId: OpenAI.FineTuneId): Promise<OpenAI.FineTune> {
        const _response = await core.fetcher({
            url: urlJoin(
                environments.OpenAIEnvironment.Production,
                `/fine-tunes/${await serializers.FineTuneId.jsonOrThrow(fineTuneId)}/cancel`
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "OpenAI-Organization": await core.Supplier.get(this.options.organization),
            },
            contentType: "application/json",
        });
        if (_response.ok) {
            return await serializers.FineTune.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new OpenAI.UnauthorizedError();
                case 429:
                    throw new OpenAI.RateLimitError();
                case 500:
                    throw new OpenAI.InternalServerError();
                default:
                    throw new errors.OpenAIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenAIError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpenAITimeoutError();
            case "unknown":
                throw new errors.OpenAIError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get fine-grained status updates for a fine-tune job.
     *
     */
    public listEvents(
        fineTuneId: OpenAI.FineTuneId,
        request: OpenAI.ListFineTuneEventsRequest & {
            stream?: false;
        }
    ): Promise<OpenAI.ListFineTuneEventsResponse>;
    public listEvents(
        fineTuneId: OpenAI.FineTuneId,
        request: OpenAI.ListFineTuneEventsRequest & {
            stream: true;
        },
        cb: (data: OpenAI.FineTune) => void,
        opts?: Pick<core.StreamingFetcher.Args, "onError" | "onFinish" | "abortController" | "timeoutMs">
    ): Promise<void>;
    public async listEvents(
        fineTuneId: OpenAI.FineTuneId,
        request: OpenAI.ListFineTuneEventsRequest = {},
        cb?: (data: OpenAI.FineTune) => void,
        opts?: Pick<core.StreamingFetcher.Args, "onError" | "onFinish" | "abortController" | "timeoutMs">
    ): Promise<OpenAI.ListFineTuneEventsResponse | void> {
        const { stream } = request;
        const _queryParams = new URLSearchParams();
        if (stream != null) {
            _queryParams.append("stream", stream.toString());
        }

        if (stream) {
            const _queue = new core.CallbackQueue();
            await core.streamingFetcher({
                url: urlJoin(
                    environments.OpenAIEnvironment.Production,
                    `/fine-tunes/${await serializers.FineTuneId.jsonOrThrow(fineTuneId)}/events`
                ),
                method: "GET",
                headers: {
                    Authorization: await this._getAuthorizationHeader(),
                    "OpenAI-Organization": await core.Supplier.get(this.options.organization),
                },
                queryParameters: _queryParams,
                onData: _queue.wrap(async (data) => {
                    const parsed = await serializers.FineTune.parse(data, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                    });
                    if (parsed.ok) {
                        cb?.(parsed.value);
                    } else {
                        opts?.onError?.(parsed.errors);
                    }
                }),
                onError: opts?.onError != null ? _queue.wrap(opts.onError) : undefined,
                onFinish: opts?.onFinish != null ? _queue.wrap(opts.onFinish) : undefined,
                abortController: opts?.abortController,
                terminator: "[DONE]",
            });
        } else {
            const _response = await core.fetcher({
                url: urlJoin(
                    environments.OpenAIEnvironment.Production,
                    `/fine-tunes/${await serializers.FineTuneId.jsonOrThrow(fineTuneId)}/events`
                ),
                method: "GET",
                headers: {
                    Authorization: await this._getAuthorizationHeader(),
                    "OpenAI-Organization": await core.Supplier.get(this.options.organization),
                },
                contentType: "application/json",
                queryParameters: _queryParams,
            });
            if (_response.ok) {
                return await serializers.ListFineTuneEventsResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 401:
                        throw new OpenAI.UnauthorizedError();
                    case 429:
                        throw new OpenAI.RateLimitError();
                    case 500:
                        throw new OpenAI.InternalServerError();
                    default:
                        throw new errors.OpenAIError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.OpenAIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.OpenAITimeoutError();
                case "unknown":
                    throw new errors.OpenAIError({
                        message: _response.error.errorMessage,
                    });
            }
        }
    }

    private async _getAuthorizationHeader() {
        const bearer = await core.Supplier.get(this.options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
