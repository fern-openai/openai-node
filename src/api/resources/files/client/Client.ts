/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { OpenAiApi } from "@fern-api/open-ai";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Files {
    interface Options {
        environment?: environments.OpenAiApiEnvironment | string;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}

export class Files {
    constructor(private readonly options: Files.Options) {}

    /**
     * Returns a list of files that belong to the user's organization.
     */
    public async list(): Promise<OpenAiApi.ListFilesResponse> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.OpenAiApiEnvironment.Production, "/files"),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.ListFilesResponse.parseOrThrow(
                _response.body as serializers.ListFilesResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpenAiApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenAiApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpenAiApiTimeoutError();
            case "unknown":
                throw new errors.OpenAiApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.
     *
     */
    public async create(): Promise<OpenAiApi.OpenAiFile> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.OpenAiApiEnvironment.Production, "/files"),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.OpenAiFile.parseOrThrow(_response.body as serializers.OpenAiFile.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpenAiApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenAiApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpenAiApiTimeoutError();
            case "unknown":
                throw new errors.OpenAiApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Returns information about a specific file.
     */
    public async retrieve(fileId: OpenAiApi.FileId): Promise<OpenAiApi.OpenAiFile> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.OpenAiApiEnvironment.Production,
                `/files/${await serializers.FileId.jsonOrThrow(fileId)}`
            ),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.OpenAiFile.parseOrThrow(_response.body as serializers.OpenAiFile.Raw, {
                allowUnknownKeys: true,
            });
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpenAiApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenAiApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpenAiApiTimeoutError();
            case "unknown":
                throw new errors.OpenAiApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Delete a file.
     */
    public async delete(fileId: OpenAiApi.FileId): Promise<OpenAiApi.DeleteFileResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.OpenAiApiEnvironment.Production,
                `/files/${await serializers.FileId.jsonOrThrow(fileId)}`
            ),
            method: "DELETE",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.DeleteFileResponse.parseOrThrow(
                _response.body as serializers.DeleteFileResponse.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpenAiApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenAiApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpenAiApiTimeoutError();
            case "unknown":
                throw new errors.OpenAiApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Returns the contents of the specified file
     */
    public async download(fileId: OpenAiApi.FileId): Promise<string> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.OpenAiApiEnvironment.Production,
                `/files/${await serializers.FileId.jsonOrThrow(fileId)}/content`
            ),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
        });
        if (_response.ok) {
            return await serializers.files.download.Response.parseOrThrow(
                _response.body as serializers.files.download.Response.Raw,
                { allowUnknownKeys: true }
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.OpenAiApiError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenAiApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.OpenAiApiTimeoutError();
            case "unknown":
                throw new errors.OpenAiApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
